{"version":3,"sources":["contexts/util.tsx","contexts/todos.ts","contexts/filter.ts","contexts/colorMode.ts","contexts/index.tsx","components/ColorModeSwitch.tsx","components/FilterButtonGroup.tsx","components/NewItemForm.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/EditableTodoList.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["todosReducer","todos","action","type","concat","id","nanoid","text","payload","complete","map","todo","filter","filterReducer","colorModeReducer","mode","initTodos","ctx","React","undefined","c","Error","createDefinedContext","useGlobalState","GlobalStateContext","GlobalStateProvider","props","useReducers","colorMode","Object","keys","reduce","acc","key","forEach","fn","state","dispatch","Provider","value","children","styles","position","right","top","toTitle","str","slice","toUpperCase","ColorModeSwitch","label","style","Tooltip","title","arrow","IconButton","onClick","FilterButtonGroup","FormControl","component","FormLabel","RadioGroup","row","name","onChange","event","target","FormControlLabel","control","Radio","NewItemForm","setText","onSubmit","preventDefault","variant","fullWidth","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","required","TodoListItem","item","labelId","ListItem","role","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","primary","ListItemSecondaryAction","applyFilter","TodoList","filteredTodos","List","formStyles","marginTop","EditableTodoList","headerStyles","textAlign","Header","App","theme","createTheme","palette","ThemeProvider","CssBaseline","Container","maxWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccd9e4f7.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Action } from '../types'\n\n/**\n * A helper to create a Context  with no upfront default value, and without\n * having to check for undefined all the time.\n * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context React Typescript Cheatsheeet}\n */\nfunction createDefinedContext<A extends {} | null>() {\n  const ctx = React.createContext<A | undefined>(undefined)\n\n  function useDefinedContext() {\n    const c = React.useContext(ctx)\n    if (c === undefined)\n      throw new Error(\n        'useDefinedContext must be inside a Provider with a value'\n      )\n    return c\n  }\n\n  return [useDefinedContext, ctx] as const // makes TypeScript infer a tuple\n}\n\nconst useCombinedReducer = (useReducers: any) => {\n  // Global State\n  const state = Object.keys(useReducers).reduce(\n    (acc, key) => ({ ...acc, [key]: useReducers[key][0] }),\n    {}\n  )\n\n  // Global Dispatch Function\n  const dispatch = (action: Action) =>\n    Object.keys(useReducers)\n      .map(key => useReducers[key][1])\n      .forEach(fn => fn(action))\n\n  return [state, dispatch] as const // makes TypeScript infer a tuple\n}\n\nexport { createDefinedContext, useCombinedReducer }\n","import { nanoid } from 'nanoid'\nimport { Action, Todo } from '../types'\n\nconst todosReducer = (todos: Todo[], action: Action) => {\n  switch (action.type) {\n    case 'item/add':\n      return todos.concat({\n        id: nanoid(),\n        text: action.payload.text,\n        complete: false\n      })\n\n    case 'item/toggle':\n      return todos.map(todo => {\n        if (todo.id === action.payload.id) {\n          return { ...todo, complete: !todo.complete }\n        }\n        return todo\n      })\n\n    case 'item/delete':\n      return todos.filter(todo => todo.id !== action.payload.id)\n\n    default:\n      return todos // ignore unrecognised\n  }\n}\n\nexport { todosReducer }\n","import { Action, Filter } from '../types'\n\nconst filterReducer = (filter: Filter, action: Action) => {\n  switch (action.type) {\n    case 'filter/set':\n      return action.payload.filter\n\n    default:\n      return filter // ignore unrecognised\n  }\n}\n\nexport { filterReducer }\n","import { Action, ColorMode } from '../types'\n\nconst colorModeReducer = (mode: ColorMode, action: Action) => {\n  switch (action.type) {\n    case 'colorMode/toggle':\n      return mode === 'light' ? 'dark' : 'light'\n\n    default:\n      return mode // ignore unrecognised\n  }\n}\n\nexport { colorModeReducer }\n","import * as React from 'react'\nimport { nanoid } from 'nanoid'\nimport { createDefinedContext, useCombinedReducer } from './util'\nimport { todosReducer } from './todos'\nimport { filterReducer } from './filter'\nimport { colorModeReducer } from './colorMode'\nimport { Action } from '../types'\n\nconst initTodos = [\n  {\n    id: nanoid(),\n    text: 'Hello, world!',\n    complete: true\n  },\n  {\n    id: nanoid(),\n    text: `This is an example todo item.`,\n    complete: true\n  },\n  {\n    id: nanoid(),\n    text: 'Add your own todo items in the textbox above.',\n    complete: false\n  }\n]\n\ninterface IGlobalStateContext {\n  state: any\n  dispatch(action: Action): void\n}\n\nconst [useGlobalState, GlobalStateContext] =\n  createDefinedContext<IGlobalStateContext>()\n\ninterface Props {\n  children: React.ReactNode\n}\n\nconst GlobalStateProvider = (props: Props) => {\n  const [state, dispatch] = useCombinedReducer({\n    todos: React.useReducer(todosReducer, initTodos),\n    filter: React.useReducer(filterReducer, 'all'),\n    colorMode: React.useReducer(colorModeReducer, 'light')\n  })\n\n  return (\n    <GlobalStateContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </GlobalStateContext.Provider>\n  )\n}\n\nexport { GlobalStateProvider as default, useGlobalState }\n","import * as React from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Brightness4Icon from '@material-ui/icons/Brightness4'\nimport Brightness7Icon from '@material-ui/icons/Brightness7'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { useGlobalState } from '../contexts'\n\nconst styles: React.CSSProperties = {\n  position: 'fixed',\n  right: '20px',\n  top: '10px'\n}\n\nconst ColorModeSwitch = () => {\n  const { state, dispatch } = useGlobalState()\n  const colorMode = state.colorMode\n  const oppositeMode = colorMode === 'light' ? 'dark' : 'light'\n  const label = `${toTitle(oppositeMode)} mode`\n\n  const handleClick = () => {\n    dispatch({ type: 'colorMode/toggle' })\n  }\n\n  return (\n    <div style={styles}>\n      <Tooltip title={label} arrow>\n        <IconButton onClick={handleClick} aria-label={label}>\n          {colorMode === 'light' && <Brightness4Icon />}\n          {colorMode === 'dark' && <Brightness7Icon />}\n        </IconButton>\n      </Tooltip>\n    </div>\n  )\n}\n\nconst toTitle = (str: string) => {\n  return str.slice(0, 1).toUpperCase() + str.slice(1)\n}\n\nexport default ColorModeSwitch\n","import * as React from 'react'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport { Filter } from '../types'\nimport { useGlobalState } from '../contexts'\n\nconst FilterButtonGroup = () => {\n  const { state, dispatch } = useGlobalState()\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const filter = event.target.value as Filter\n    dispatch({\n      type: 'filter/set',\n      payload: { filter }\n    })\n  }\n\n  return (\n    <FormControl component=\"fieldset\">\n      <FormLabel component=\"legend\">Show</FormLabel>\n      <RadioGroup\n        row\n        aria-label=\"filter\"\n        name=\"filter\"\n        value={state.filter}\n        onChange={handleChange}\n      >\n        <FormControlLabel value=\"all\" control={<Radio />} label=\"All\" />\n        <FormControlLabel\n          value=\"complete\"\n          control={<Radio />}\n          label=\"Complete\"\n        />\n        <FormControlLabel\n          value=\"incomplete\"\n          control={<Radio />}\n          label=\"Incomplete\"\n        />\n      </RadioGroup>\n    </FormControl>\n  )\n}\n\nexport default FilterButtonGroup\n","import * as React from 'react'\nimport AddIcon from '@material-ui/icons/Add'\nimport FormControl from '@material-ui/core/FormControl'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport { useGlobalState } from '../contexts'\n\nconst NewItemForm = () => {\n  const [text, setText] = React.useState('')\n  const { dispatch } = useGlobalState()\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value)\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    dispatch({\n      type: 'item/add',\n      payload: { text }\n    })\n    setText('')\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl variant=\"outlined\" fullWidth>\n        <InputLabel htmlFor=\"component-outlined\">Add an item</InputLabel>\n        <OutlinedInput\n          id=\"component-outlined\"\n          value={text}\n          onChange={handleChange}\n          label=\"Add an item\"\n          endAdornment={\n            <InputAdornment position=\"end\">\n              <IconButton type=\"submit\">\n                <AddIcon />\n              </IconButton>\n            </InputAdornment>\n          }\n          required\n        />\n      </FormControl>\n    </form>\n  )\n}\n\nexport default NewItemForm\n","import * as React from 'react'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport IconButton from '@material-ui/core/IconButton'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { Todo } from '../types'\nimport { useGlobalState } from '../contexts'\n\ninterface Props {\n  item: Todo\n}\n\nconst TodoListItem = (props: Props) => {\n  const { id, text, complete } = props.item\n  const { dispatch } = useGlobalState()\n\n  const handleClick = () => {\n    dispatch({\n      type: 'item/toggle',\n      payload: { id }\n    })\n  }\n\n  const handleDelete = () => {\n    dispatch({\n      type: 'item/delete',\n      payload: { id }\n    })\n  }\n\n  const labelId = `todo-list-label-${id}`\n  return (\n    <ListItem role=\"listitem\" button onClick={handleClick}>\n      <ListItemIcon>\n        <Checkbox\n          edge=\"start\"\n          checked={complete}\n          tabIndex={-1}\n          disableRipple\n          inputProps={{ 'aria-labelledby': labelId }}\n        />\n      </ListItemIcon>\n      <ListItemText id={labelId} primary={text} />\n      <ListItemSecondaryAction>\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete}>\n          <ClearIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n\nexport default TodoListItem\n","import * as React from 'react'\nimport List from '@material-ui/core/List'\nimport TodoListItem from './TodoListItem'\nimport { useGlobalState } from '../contexts'\nimport { Filter, Todo } from '../types'\n\nconst TodoList = () => {\n  const { state } = useGlobalState()\n\n  const filteredTodos = applyFilter(state.todos, state.filter)\n\n  return (\n    <List>\n      {filteredTodos.map(todo => (\n        <TodoListItem key={todo.id} item={todo} />\n      ))}\n    </List>\n  )\n}\n\nconst applyFilter = (todos: Todo[], filter: Filter) => {\n  return todos.filter(todo => {\n    if (filter === 'all') {\n      return true\n    }\n    if (filter === 'complete' && todo.complete) {\n      return true\n    }\n    if (filter === 'incomplete' && !todo.complete) {\n      return true\n    }\n    return false\n  })\n}\n\nexport default TodoList\n","import * as React from 'react'\nimport FilterButtonGroup from './FilterButtonGroup'\nimport NewItemForm from './NewItemForm'\nimport TodoList from './TodoList'\n\nconst formStyles = {\n  marginTop: '24px'\n}\n\nconst EditableTodoList = () => {\n  return (\n    <>\n      <FilterButtonGroup />\n      <div style={formStyles}>\n        <NewItemForm />\n        <TodoList />\n      </div>\n    </>\n  )\n}\n\nexport default EditableTodoList\n","import * as React from 'react'\n\nconst headerStyles: React.CSSProperties = {\n  textAlign: 'center'\n}\n\nconst Header = () => {\n  return (\n    <header style={headerStyles}>\n      <h1>Todo List</h1>\n    </header>\n  )\n}\n\nexport default Header\n","import * as React from 'react'\nimport Container from '@material-ui/core/Container'\nimport { createTheme } from '@material-ui/core'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/styles'\nimport ColorModeSwitch from './components/ColorModeSwitch'\nimport EditableTodoList from './components/EditableTodoList'\nimport Header from './components/Header'\nimport { useGlobalState } from './contexts'\n\nconst App = () => {\n  const { state } = useGlobalState()\n  const colorMode = state.colorMode\n\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: { type: colorMode }\n      }),\n    [colorMode]\n  )\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ColorModeSwitch />\n      <Container maxWidth=\"sm\">\n        <Header />\n        <EditableTodoList />\n      </Container>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport GlobalStateProvider from './contexts'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStateProvider>\n      <App />\n    </GlobalStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}